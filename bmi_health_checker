{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "531c5812-9957-4c5b-b2e6-14456e3b83a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello,python!\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello,python!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "87bcf7be-3f12-4a6a-9729-447617e29b39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my name is Dr.Navya and I'm learning Python\n"
     ]
    }
   ],
   "source": [
    "print(\"my name is Dr.Navya and I'm learning Python\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ec88ff8d-7180-45f7-90e2-4eba0a964676",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Doctor's name is Dr.Navya\n",
      "Doctor's age is 27\n"
     ]
    }
   ],
   "source": [
    "name=\"Dr.Navya\"\n",
    "age=\"27\"\n",
    "print(\"Doctor's name is\",name)\n",
    "print(\"Doctor's age is\",age )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "17543283-a020-4aac-81d9-8f543a2f6af6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Doctor's name is  Dr.Navya\n",
      "Doctor's age is 28\n"
     ]
    }
   ],
   "source": [
    "name=\"Dr.Navya\"\n",
    "age=27\n",
    "print(\"Doctor's name is \",name)\n",
    "print(\"Doctor's age is\",age+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ca925d67-ed0c-4107-994d-f98da8a939e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Headache: True\n",
      "Fever: False\n"
     ]
    }
   ],
   "source": [
    "has_headache=True\n",
    "has_fever=False\n",
    "print(\"Headache:\",has_headache)\n",
    "print(\"Fever:\",has_fever)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9857c40f-f618-49d6-add0-ad162634cc7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "General symptoms-observe further.\n"
     ]
    }
   ],
   "source": [
    "has_cough=True\n",
    "has_fever=False\n",
    "if has_cough and has_fever:print(\"Suggest:Test for COVID.\")\n",
    "else:print(\"General symptoms-observe further.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cd6e3d46-f1ce-47a1-a118-5c39f5ffa5d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Give: Cough syrup.\n"
     ]
    }
   ],
   "source": [
    "has_cough = True\n",
    "has_fever = False\n",
    "\n",
    "if has_cough and has_fever:\n",
    "    print(\"Suggest: Test for COVID.\")\n",
    "elif has_fever:\n",
    "    print(\"Give: Paracetamol and rest.\")\n",
    "elif has_cough:\n",
    "    print(\"Give: Cough syrup.\")\n",
    "else:\n",
    "    print(\"No symptoms. Advise rest.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ae155cc-94ca-495b-bff2-6a3ad32a5353",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No symptoms. Advise rest.\n"
     ]
    }
   ],
   "source": [
    "has_cough = False\n",
    "has_fever = False\n",
    "\n",
    "if has_cough and has_fever:\n",
    "    print(\"Suggest: Test for COVID.\")\n",
    "elif has_fever:\n",
    "    print(\"Give: Paracetamol and rest.\")\n",
    "elif has_cough:\n",
    "    print(\"Give: Cough syrup.\")\n",
    "else:\n",
    "    print(\"No symptoms. Advise rest.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0aa1e7fd-e5bf-450f-bb56-e5ffcb648ca4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suggest: Test for COVID.\n"
     ]
    }
   ],
   "source": [
    "has_cough = True\n",
    "has_fever = True\n",
    "\n",
    "if has_cough and has_fever:\n",
    "    print(\"Suggest: Test for COVID.\")\n",
    "elif has_fever:\n",
    "    print(\"Give: Paracetamol and rest.\")\n",
    "elif has_cough:\n",
    "    print(\"Give: Cough syrup.\")\n",
    "else:\n",
    "    print(\"No symptoms. Advise rest.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "daffbe86-9e8a-498f-b80d-66f1662c8003",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Does the patient have fever? (yes/no):  yes\n"
     ]
    }
   ],
   "source": [
    "has_fever = input(\"Does the patient have fever? (yes/no): \")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bc009fbf-4195-4b68-ae36-836eb3311a3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Fever? (yes/no):  yes\n",
      "Cough? (yes/no):  no\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Give: Paracetamol and rest.\n"
     ]
    }
   ],
   "source": [
    "has_fever = input(\"Fever? (yes/no): \") == \"yes\"\n",
    "has_cough = input(\"Cough? (yes/no): \") == \"yes\"\n",
    "\n",
    "if has_fever and has_cough:\n",
    "    print(\"Suggest: Test for COVID.\")\n",
    "elif has_fever:\n",
    "    print(\"Give: Paracetamol and rest.\")\n",
    "elif has_cough:\n",
    "    print(\"Give: Cough syrup.\")\n",
    "else:\n",
    "    print(\"No symptoms. Advise rest.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "83a38750-37ca-4624-828f-3f257a4c5e92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Fever? (yes/no):  yes\n",
      "Cough? (yes/no):  yes\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Give: Paracetamol and rest.\n"
     ]
    }
   ],
   "source": [
    "has_fever = input(\"Fever? (yes/no): \") == \"yes\"\n",
    "has_cough = input(\"Cough? (yes/no): \") == \"no\"\n",
    "\n",
    "if has_cough and has_fever:\n",
    "    print(\"Suggest: Test for COVID.\")\n",
    "elif has_fever:\n",
    "    print(\"Give: Paracetamol and rest.\")\n",
    "elif has_cough:\n",
    "    print(\"Give: Cough syrup.\")\n",
    "else:\n",
    "    print(\"No symptoms. Advise rest.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9383e74e-c3f1-4f47-b216-3a875267c1be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Fever? (yes/no):  no\n",
      "Cough? (yes/no):  no\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suggest: Test for COVID.\n"
     ]
    }
   ],
   "source": [
    "has_fever = input(\"Fever? (yes/no): \") == \"no\"\n",
    "has_cough = input(\"Cough? (yes/no): \") == \"no\"\n",
    "\n",
    "if has_cough and has_fever:\n",
    "    print(\"Suggest: Test for COVID.\")\n",
    "elif has_fever:\n",
    "    print(\"Give: Paracetamol and rest.\")\n",
    "elif has_cough:\n",
    "    print(\"Give: Cough syrup.\")\n",
    "else:\n",
    "    print(\"No symptoms. Advise rest.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1bc66286-ead5-4874-9a42-136da700a7d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your weight in kg:  80.2\n",
      "Enter your height in meters:  1.73\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your BMI is: 26.8\n"
     ]
    }
   ],
   "source": [
    "weight = float(input(\"Enter your weight in kg: \"))\n",
    "height = float(input(\"Enter your height in meters: \"))\n",
    "bmi = weight / (height ** 2)\n",
    "print(\"Your BMI is:\", round(bmi, 2))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "895c46bc-6a7c-43e7-a4fd-d30ad02bd300",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are overweight. Consider exercise and diet changes.\n"
     ]
    }
   ],
   "source": [
    "if bmi < 18.5:\n",
    "    print(\"You are underweight. Consider a nutrition plan.\")\n",
    "elif bmi < 25:\n",
    "    print(\"You have a normal weight. Keep up the good work!\")\n",
    "elif bmi < 30:\n",
    "    print(\"You are overweight. Consider exercise and diet changes.\")\n",
    "else:\n",
    "    print(\"You are obese. Medical advice is recommended.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f973e9de-a4ab-4ea7-b372-3b259cf3de5e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (3473920992.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[18], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    weight=(float(input(\"Enter you weight in kgs:\"))\u001b[0m\n\u001b[1;37m            ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "weight=(float(input(\"Enter you weight in kgs:\"))\n",
    "        Height=(float(input(\"Enter your height in meters:\"))\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "29afd83f-cc2a-4b8a-8313-478864c29ce0",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1625902403.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[19], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    Height=float(input(\"Enter your height in meters:\"))\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "weight=float(input(\"Enter you weight in kgs:\"))\n",
    "        Height=float(input(\"Enter your height in meters:\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5b64675b-78ff-4a35-9436-8e2d92669011",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (3794997131.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[20], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    height=float(input(\"Enter your height in meters:\"))\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "weight=float(input(\"Enter you weight in kgs:\"))\n",
    "        height=float(input(\"Enter your height in meters:\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "966229a9-3c11-468a-b59a-fe40994adf2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter you weight in kgs: \n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m weight\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter you weight in kgs:\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n\u001b[0;32m      2\u001b[0m Height\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter your height in meters:\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n\u001b[0;32m      3\u001b[0m bmi\u001b[38;5;241m=\u001b[39mweight\u001b[38;5;241m/\u001b[39m(height\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m)\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: ''"
     ]
    }
   ],
   "source": [
    "weight=float(input(\"Enter you weight in kgs:\"))\n",
    "Height=float(input(\"Enter your height in meters:\"))\n",
    "bmi=weight/(height**2)\n",
    "print(\"Your BMI IS:\",round(bmi,2))\n",
    "if bmi < 18.5:\n",
    "    print(\"You are underweight. Consider a nutrition plan.\")\n",
    "elif bmi < 25:\n",
    "    print(\"You have a normal weight. Keep up the good work!\")\n",
    "elif bmi < 30:\n",
    "    print(\"You are overweight. Consider exercise and diet changes.\")\n",
    "else:\n",
    "    print(\"You are obese. Medical advice is recommended.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2f413bbc-7ddc-47dd-a2b2-1776f398c160",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (85406311.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[24], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    weight=float(input(\"Enter the weight in kgs\")\u001b[0m\n\u001b[1;37m                 ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "weight=float(input(\"Enter the weight in kgs\")\n",
    "Height=float(input(\"Enter the Height in meters\")\n",
    "bmi=weight/(height**2)\n",
    "print(\"Your BMI is :\",round(bmi,2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e968eda5-3c29-46f4-8d4b-d73734bd4f4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter you weight in kgs: 89\n",
      "Enter your height in meters: 1.7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your BMI IS: 29.74\n",
      "You are overweight. Consider exercise and diet changes.\n"
     ]
    }
   ],
   "source": [
    "weight=float(input(\"Enter you weight in kgs:\"))\n",
    "Height=float(input(\"Enter your height in meters:\"))\n",
    "bmi=weight/(height**2)\n",
    "print(\"Your BMI IS:\",round(bmi,2))\n",
    "if bmi < 18.5:\n",
    "    print(\"You are underweight. Consider a nutrition plan.\")\n",
    "elif bmi < 25:\n",
    "    print(\"You have a normal weight. Keep up the good work!\")\n",
    "elif bmi < 30:\n",
    "    print(\"You are overweight. Consider exercise and diet changes.\")\n",
    "else:\n",
    "    print(\"You are obese. Medical advice is recommended.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5add414e-f94a-4267-b493-41ecc7d9ec83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter patient's name:  Sheela\n",
      "Enter patient's age:  56\n",
      "Enter weight in kg:  80\n",
      "Enter height in meters:  1.7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Health Report ---\n",
      "Name: Sheela\n",
      "Age: 56\n",
      "BMI: 27.68\n",
      "Advice: Overweight. Consider exercise and diet changes.\n",
      "\n",
      "Report saved to file: bmi_report.txt ✅\n"
     ]
    }
   ],
   "source": [
    "\n",
    "name = input(\"Enter patient's name: \")\n",
    "age = input(\"Enter patient's age: \")\n",
    "weight = float(input(\"Enter weight in kg: \"))\n",
    "height = float(input(\"Enter height in meters: \"))\n",
    "bmi = weight / (height ** 2)\n",
    "bmi = round(bmi, 2)\n",
    "if bmi < 18.5:\n",
    "    advice = \"Underweight. Consider a nutrition plan.\"\n",
    "elif bmi < 25:\n",
    "    advice = \"Normal weight. Keep up the good work!\"\n",
    "elif bmi < 30:\n",
    "    advice = \"Overweight. Consider exercise and diet changes.\"\n",
    "else:\n",
    "    advice = \"Obese. Medical advice is recommended.\"\n",
    "print(\"\\n--- Health Report ---\")\n",
    "print(\"Name:\", name)\n",
    "print(\"Age:\", age)\n",
    "print(\"BMI:\", bmi)\n",
    "print(\"Advice:\", advice)\n",
    "with open(\"bmi_report.txt\", \"w\") as file:\n",
    "    file.write(\"Patient Health Report\\n\")\n",
    "    file.write(\"---------------------\\n\")\n",
    "    file.write(f\"Name: {name}\\n\")\n",
    "    file.write(f\"Age: {age}\\n\")\n",
    "    file.write(f\"Weight: {weight} kg\\n\")\n",
    "    file.write(f\"Height: {height} m\\n\")\n",
    "    file.write(f\"BMI: {bmi}\\n\")\n",
    "    file.write(f\"Advice: {advice}\\n\")\n",
    "\n",
    "print(\"\\nReport saved to file: bmi_report.txt ✅\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ad2b1b3-b246-4a00-80f5-6c1ca90c434a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
